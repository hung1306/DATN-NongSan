const moment = require('moment');
const pool = require("../config/dbConnect");

exports.autoUpdateProductBatch = async (req, res) => {
  try {
    const today = moment();

    // Truy v·∫•n t·∫•t c·∫£ c√°c l√¥ h√†ng c√πng v·ªõi th√¥ng tin h·∫°n s·ª≠ d·ª•ng ti√™u chu·∫©n c·ªßa t·ª´ng lo·∫°i s·∫£n ph·∫©m
    const res = await pool.query(`
      SELECT b.batchid, b.expirydate, b.batchquality, b.promotion, c.standardexpiry
      FROM product_batch b
      JOIN product p ON b.productid = p.productid
      JOIN category c ON p.categoryid = c.categoryid
    `);
    const batches = res.rows;

    const updatePromises = batches.map(async (batch) => {
      const expiryDate = moment(batch.expirydate);
      const standardExpiry = batch.standardexpiry; // H·∫°n s·ª≠ d·ª•ng ti√™u chu·∫©n theo lo·∫°i
      const daysUntilExpiry = expiryDate.diff(today, 'days');
      
      let newQuality = batch.batchquality;
      let newPromotion = batch.promotion;

      // ƒêi·ªÅu ch·ªânh logic d·ª±a v√†o h·∫°n s·ª≠ d·ª•ng ti√™u chu·∫©n
      if (daysUntilExpiry > standardExpiry * 0.5) {
        newQuality = 'T∆∞∆°i';
        newPromotion = 0;
      } else if (daysUntilExpiry <= standardExpiry * 0.5 && daysUntilExpiry > standardExpiry * 0.25) {
        newQuality = 'T∆∞∆°ng ƒë·ªëi t∆∞∆°i';
        newPromotion = 10;
      } else if (daysUntilExpiry <= standardExpiry * 0.25 && daysUntilExpiry > standardExpiry * 0.1) {
        newQuality = 'B√¨nh th∆∞·ªùng';
        newPromotion = 25;
      } else if (daysUntilExpiry <= standardExpiry * 0.1 && daysUntilExpiry > 0) {
        newQuality = 'S·∫Øp h·∫øt h·∫°n';
        newPromotion = 50;
      } else if (daysUntilExpiry <= 0) {
        newQuality = 'H·∫øt h·∫°n';
        newPromotion = 70;
      }

      // C·∫≠p nh·∫≠t n·∫øu tr·∫°ng th√°i ho·∫∑c gi·∫£m gi√° thay ƒë·ªïi
      if (newPromotion !== batch.batchquality || newPromotion !== batch.promotion) {
        await pool.query(
          'UPDATE product_batch SET batchquality = $1, promotion = $2 WHERE batchid = $3',
          [newQuality, newPromotion, batch.batchid]
        );
        
      }
    });

    // Ch·ªù t·∫•t c·∫£ c√°c truy v·∫•n c·∫≠p nh·∫≠t ho√†n th√†nh
    await Promise.all(updatePromises);

    console.log('Product batches updated successfullyüëå');
  } catch (error) {
    console.error("Error updating product batch:", error);
  }
};